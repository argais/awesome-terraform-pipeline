name: Awesome Terraform Workflow

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
  STAGING_TF_WORKING_DIR: terraform/staging

jobs:
  terraform-fmt-check:
    runs-on: ubuntu-latest
    outputs:
      fmt: ${{ steps.fmt.outcome }} # map step output to job output
    steps:
      - uses: hashicorp/setup-terraform@v1
        name: Setup Terraform
      - uses: actions/checkout@v2
        name: Checkout source code
      - name: Terraform fmt
        id: fmt
        run: terraform fmt --recursive -check
        working-directory: terraform
  terraform-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: hashicorp/setup-terraform@v1
        name: Setup Terraform
      - uses: actions/checkout@v2
        name: Checkout source code
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.STAGING_TF_WORKING_DIR }}
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.STAGING_TF_WORKING_DIR }}
  terraform-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: hashicorp/setup-terraform@v1
        name: Setup Terraform
      - uses: actions/checkout@v2
        name: Checkout source code
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.STAGING_TF_WORKING_DIR }}
      - name: tflint
        uses: reviewdog/action-tflint@master
        with:
          github_token: ${{ secrets.github_token }}
          flags: "-c ../.tflint.hcl"
          working_directory: ${{ env.STAGING_TF_WORKING_DIR }}
          fail_on_error: "true"
          filter_mode: "nofilter"
  checkov:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ env.STAGING_TF_WORKING_DIR }}
          quiet: true 
          framework: terraform 
  terraform-plan:
    runs-on: ubuntu-latest
    needs: [terraform-fmt-check, terraform-validate, terraform-lint]
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.STAGING_TF_WORKING_DIR }}
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: ${{ env.STAGING_TF_WORKING_DIR }}
        continue-on-error: true
      - name: Publish terraform plan
        id: publish-plan
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request' 
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ needs.terraform-fmt-check.outputs.fmt }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.STAGING_TF_WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  infracost:
    runs-on: ubuntu-latest
    name: Evaluate cost management with infracost
    needs: terraform-plan
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
    - name: Run infracost diff
      uses: infracost/infracost-gh-action@master 
      env:
        INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tfdir: ${{ env.STAGING_TF_WORKING_DIR }}
        entrypoint: /scripts/ci/diff.sh
        percentage_threshold: 1
